<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2021-01-26T21:50:00Z</updated>
  <entry>
    <title>This Week in Spring - January 26th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/26/this-week-in-spring-january-26th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-26:4347</id>
    <updated>2021-01-26T21:50:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As I type this I&amp;rsquo;m sitting on the amazing Tanzu Tuesday&amp;rsquo;s stream as a (guest) cohost &lt;a href="http://twitter.com/tiffanyfayj"&gt;with Tiffany Jernigan (@tiffanyfayj)&lt;/a&gt; learning about tips and tricks for working with Spring Boot and Kubernetes from the &lt;a href="http://twitter.com/olliehughes82"&gt;Spring team&amp;rsquo;s Oliver Hughes (@olliehughes82)&lt;/a&gt;. If you missed it, then it - and all sorts of other content - is available for replays on our &lt;a href="http://twitch.tv/vmwaretanzu"&gt;Tanzu Twitch.tv channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now then, we&amp;rsquo;ve got a ton of good stuff to get to so let&amp;rsquo;s gooo&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tomorrow, I&amp;rsquo;ll be streaming with Reactor team member and &lt;a href="https://tanzu.vmware.com/developer/tv/code/0018/"&gt;RSocket committer Oleh Dokuka on Twitch.tv/vmwaretanzu&lt;/a&gt; - don&amp;rsquo;t miss it!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1352347656178302997"&gt;Mark your calendars! Call for Papers and registration for SpringOne 2021 open on Feb. 16. Sign up for updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/21/a-bootiful-podcast-spring-tools-lead-martin-lippert-on-sustainable-software"&gt;A Bootiful Podcast - Spring Tools lead Martin Lippert on sustainable software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/21/bootiful-application-monitoring-with-azure-spring-cloud"&gt;Bootiful Application Monitoring with Azure Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1352321956138217474"&gt;You can monitor Azure Spring Cloud Spring Boot apps and dependencies without any effort! Brought to you jointly by Microsoft and VMware &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/20/ymnnalft-dimensional-metrics-accumulation-with-micrometer"&gt;YMNNALFT: Dimensional Metrics Accumulation with Micrometer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j6y-k0j7hd4&amp;feature=share"&gt;Building a Spring Boot and Spring MVC web application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://developer.okta.com/blog/2021/01/20/reactive-java-microservices"&gt;The Okta blog has a nice post on reactive Java microservices &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/trankchung/kubeswitch/"&gt;Kubeswitch v0.2.0 - Kubernetes context and namespace switching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.javavogue.com/2019/02/how-to-create-a-rest-api-with-spring-boot/"&gt;How to create a REST API with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jishuin.proginn.com/p/763bfbd382bf"&gt;An interesting post on RSocket (Ù”€ REST Ó‹‹ÙÏ£??)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/21/spring-boot-2-5-0-m1-available-now"&gt;Spring Boot 2.5.0-M1 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/rorypreddy/status/1353338898219479044?s=12"&gt;The Azure Spring Cloud VSCode extension is out!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really enjoyed this discussion - &lt;a href="https://www.reddit.com/r/kubernetes/comments/l2l9jf/top_considerations_when_evaluating_an_ingress/"&gt;Top Considerations when Evaluating an Ingress Controller for Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/VMwareTanzu/status/1351951632158875652"&gt;VMwareTanzu KubeAcademy°Øs expert instructors design and deliver each course to give you practical #Kubernetes training. &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cloudfoundry/status/1351963315614879746"&gt; Learn how CF Protect helps recover data in Cloud Foundry &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>What's New in Azure Spring Cloud after GA?</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/25/what-s-new-in-azure-spring-cloud-after-ga" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-26:4346</id>
    <updated>2021-01-26T03:20:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;This post was written by our friend on the Azure Spring Cloud team, the amazing &lt;a href="https://twitter.com/liangkylie"&gt;Kylie Liang (@liangkylie)&lt;/a&gt;. I interviewed her for the &lt;a href="http://bootifulpodcast.fm"&gt;&lt;em&gt;Bootiful Podcast&lt;/em&gt;&lt;/a&gt; in April 2019, too! -Josh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2020 was a busy year for Azure Spring Cloud service. Microsoft and VMware co-announced Azure Spring Cloud General Availability (GA). We were excited to see how Azure Spring Cloud helped customers focus on code and let us take care of the underlying infrastructure management, operation, and maintenance. We continue to prioritize our work according to customers°Ø requests and feedback. For example, 7 more regions were enabled, and Azure Spring Cloud service is now available in &lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-faq?pivots=programming-language-java#in-which-regions-is-azure-spring-cloud-available"&gt;18&lt;/a&gt; regions of Asia Pacific, Australia, Canada, China, Europe, India, Korea, United Arab Emirates, United Kingdom, and the United States. In this blog, I°Øll share more about the newest features and enhancements since GA. &lt;/p&gt;&lt;h2&gt;&lt;a href="#full-apm-capabilities-w-application-insights-java-in-process-agent" class="anchor" name="full-apm-capabilities-w-application-insights-java-in-process-agent"&gt;&lt;/a&gt;Full APM Capabilities w/ Application Insights Java in-process Agent&lt;/h2&gt;
&lt;p&gt;Application Insights is an extensible Application Performance Management (APM) service for developers and DevOps professionals. With its latest Java in-process agent you can enjoy full APM functionalities besides distributed tracing. For example, you can monitor real-time live metrics without any code changes and obtain insights into application dependencies ? MySQL, PostgreSQL, JDBC, Redis, JMS, Kafka, Netty / WebFlux, etc. Learn more &lt;a href="https://spring.io/blog/2021/01/21/bootiful-application-monitoring-with-azure-spring-cloud"&gt;from here&lt;/a&gt; about effortlessly monitoring applications and dependencies in Azure Spring Cloud!&lt;/p&gt;
&lt;p&gt;As you know, there is always the possibility that a service may be down or having high latency when a service invokes another service. This may lead to exhaustion of the threads as they might be waiting for other requests to complete. With the implementation of the Circuit Breaker pattern, you can prevent failures from cascading and provide fallback behavior until a failing service is restored to normal operation. The new Spring Cloud Circuit Breaker framework unifies all implementations of its metrics data pipeline into Micrometer. Resilience4j is a new option for Spring developers to implement the Circuit Breaker pattern. Resilience4j works well with Spring Boot and using Micrometer libraries, it can produce metrics for monitoring. After enabling &lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-howto-circuit-breaker-metrics"&gt;Application Insights java in-process agent and dimension collection for Resilience4j metrics&lt;/a&gt;, you can collect Spring Cloud Resilience4j Circuit Breaker Metrics and display them in the Metrics blade of Application Insights. &lt;/p&gt;
&lt;img src ="https://github.com/joshlong/blog-images/raw/master/whats-new-in-azure-spring-cloud-after-ga-25-jan-2021/Picture1.png" /&gt;&lt;h2&gt;&lt;a href="#get-outbound-public-ip-to-secure-the-communication-with-external-resources" class="anchor" name="get-outbound-public-ip-to-secure-the-communication-with-external-resources"&gt;&lt;/a&gt;Get outbound public IP to secure the communication with external resources&lt;/h2&gt;
&lt;p&gt;Some network environments are locked down via a Firewall and allow only whitelisted IP addresses inbound to their internal network. Learn how to get &lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-howto-outbound-public-ip"&gt;static outbound public IP addresses&lt;/a&gt; of Azure Spring Cloud applications to communicate with external resources, such as databases, storage, and key vaults. &lt;/p&gt;
&lt;p&gt;Below is an example to whitelist an Azure Spring Cloud app in Azure Database for MySQL. Azure Database for MySQL provides access security using a firewall to protect your data. You can explicitly add all the outbound IPs of your Azure Spring Cloud apps. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To find the outbound public IP addresses currently used by your Azure Spring Cloud service instance in the Azure portal, click &lt;strong&gt;Networking&lt;/strong&gt; in your instance&amp;rsquo;s left-hand navigation pane. They are listed in the &lt;strong&gt;Outbound IP addresses&lt;/strong&gt; field. &lt;br/&gt; &lt;img src ="https://github.com/joshlong/blog-images/raw/master/whats-new-in-azure-spring-cloud-after-ga-25-jan-2021/Picture2.png" /&gt;&lt;/li&gt;
  &lt;li&gt;On the MySQL server page, under Settings heading, click &lt;strong&gt;Connection Security&lt;/strong&gt; and add above outbound IPs one-by-one. &lt;br/&gt;&lt;img src ="https://github.com/joshlong/blog-images/raw/master/whats-new-in-azure-spring-cloud-after-ga-25-jan-2021/Picture3.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#vs-code-extension-for-azure-spring-cloud" class="anchor" name="vs-code-extension-for-azure-spring-cloud"&gt;&lt;/a&gt;VS Code extension for Azure Spring Cloud&lt;/h2&gt;
&lt;p&gt;Besides feature requests for the Azure Spring Cloud service, we also received requests from developers about how to deploy and manage apps in their familiar environment. You can now use &lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-tutorial-intellij-deploy-apps"&gt;Azure Toolkit for IntelliJ&lt;/a&gt; or &lt;a href="http://asc-vscode/"&gt;Azure Spring Cloud extension for VS Code&lt;/a&gt; to quickly create, manage and deploy apps to Azure Spring Cloud. &lt;/p&gt;
&lt;img src ="https://github.com/joshlong/blog-images/raw/master/whats-new-in-azure-spring-cloud-after-ga-25-jan-2021/Picture4.gif" /&gt;&lt;h2&gt;&lt;a href="#what-is-upcoming" class="anchor" name="what-is-upcoming"&gt;&lt;/a&gt;What is Upcoming&lt;/h2&gt;
&lt;p&gt;Security, elastic scaling, and monitoring are key tenets of Azure Spring Cloud. In the following months, you will see more updates for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Managed Virtual Network&lt;/strong&gt;: allows users to be in control of inbound and outbound network communications for Azure Spring Cloud and enables Azure Spring Cloud to interact with systems in on-premises data centers or Azure services in virtual networks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Autoscale&lt;/strong&gt;: automates the upscaling or downscaling of the application based on load or schedule ? thus providing cost-efficiency and better performance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;E2E TLS&lt;/strong&gt;: allows users to encrypt and securely transmit sensitive data among applications or from app to the backend.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Azure RBAC&lt;/strong&gt; for managed Spring Cloud Config Server/Service Registry: allows users to authenticate with AAD (Azure Active Directory) token for accessing to managed Spring Cloud Config Server/Service Registry by Azure Spring Cloud service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integration with 3rd party APM solutions&lt;/strong&gt;: enables out-of-box experience w/ 3rd party Application Performance Monitoring (APM) tools such as New Relic, App Dynamics and Dynatrace for Azure Spring Cloud apps.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#get-started" class="anchor" name="get-started"&gt;&lt;/a&gt;Get Started&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-quickstart?tabs=Azure-CLI&amp;pivots=programming-language-java"&gt;Step by step tutorials&lt;/a&gt;: Learn the basics of Azure Spring Cloud with well-known Spring sample apps.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/modules/azure-spring-cloud-workshop/"&gt;Online workshop&lt;/a&gt;: Go through tasks to deploy Spring Boot microservices to Azure Spring Cloud with Azure database for MySQL.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.microsoft.com/azure/spring-cloud/spring-cloud-troubleshoot"&gt;Troubleshooting tips&lt;/a&gt;: Read common tips for troubleshooting Azure Spring Cloud server- and client-side issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are excited about the improving developer experience we are creating for Azure Spring Cloud service. Your feedback has been instrumental in shaping these features, keep the feedback coming. &lt;a href="mailto:AzureSpringCloud-Talk@service.microsoft.com"&gt;Contact us&lt;/a&gt; if you have feedback or questions. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Task 2.2.5 Release!</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/25/spring-cloud-task-2-2-5-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Glenn Renfro</name>
    </author>
    <id>tag:spring.io,2021-01-25:4345</id>
    <updated>2021-01-25T16:41:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Task 2.2.5 includes fixes for the following vulnerability:&lt;/p&gt;
&lt;p&gt;CVE-2020-5428&lt;br/&gt;In applications using Spring Cloud Task 2.2.4.RELEASE and below, may contain code that is vulnerable to SQL injection when exercising certain lookup queries in the TaskExplorer. &lt;/p&gt;
&lt;p&gt;Users of Spring Cloud Task 2.2.4.RELEASE and below are encouraged to upgrade to Spring Cloud Task 2.2.5.RELEASE or 2.3.0.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.7.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/25/spring-cloud-data-flow-2-7-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2021-01-25:4344</id>
    <updated>2021-01-25T15:00:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Data Flow team is pleased to announce the release of &lt;em&gt;2.7.1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2.7.1&lt;/em&gt; is a maintenance release fixing following issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UI bug fixes&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Cloudfoundry Java Client&lt;/em&gt; has been updated to &lt;em&gt;4.13.0&lt;/em&gt; fixing its memory leak&lt;/li&gt;
  &lt;li&gt;Using &lt;em&gt;Spring Boot 2.3.7&lt;/em&gt; and &lt;em&gt;Cloud Hoxton.SR9&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Spring Cloud Task&lt;/em&gt; updated to &lt;em&gt;2.2.5&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Dataflow server contains fixes for docker, metrics and some endpoints&lt;/li&gt;
  &lt;li&gt;More detailed list can be found from &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.7.1"&gt;GitHub 2.7.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also releases for &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.6.5"&gt;GitHub 2.6.5&lt;/a&gt; and &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.5.4.RELEASE"&gt;GitHub 2.5.4&lt;/a&gt; with updated &lt;em&gt;Spring Cloud Task&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;These releases fixes &lt;a href="https://tanzu.vmware.com/security/cve-2020-5427"&gt;CVE-2020-5427&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stack Overflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>YMNNALFT:  Websockets</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/25/ymnnalft-websockets" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-30:4322</id>
    <updated>2021-01-25T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;You May Not Need Another Library For That&lt;/em&gt; (YMNNALFT)! I&amp;rsquo;ve spent a lot of time since 2016 illuminating (or trying to, anyway!) some of the more enormous opportunities in the Spring ecosystem in &lt;a href="http://bit.ly/spring-tips-playlist"&gt;my Spring Tips videos&lt;/a&gt;. Today, however, I come to you in a different spirit, wanting to focus on the little, sometimes hidden, gems that do fantastic things and that might spare you an additional third-party dependency and its implied complexity. &lt;/p&gt;
&lt;p&gt;The open web has long extended hope to those who wanted a commodity platform to build and deploy services and applications at a large scale. We knew that the web could be compelling once a few things were improved. People could deliver rich clients that would be upgradeable with the refresh of a browser page. They could deliver data-and-multimedia-centric, immersive experiences. We knew that people could do these things if they only had the right paradigm for building web sites and services. But they say that you can&amp;rsquo;t appreciate the sweet without the sour, so the community embarked on a mission to find the &lt;em&gt;absolute worst&lt;/em&gt; approach to building websites and services, and that, kids, is the story of how we got PHP. &lt;/p&gt;
&lt;p&gt;The End.&lt;br/&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Alright, so there&amp;rsquo;s a &lt;em&gt;little&lt;/em&gt; more to it. In the beginning, there were severe limitations in both the backend and in the client. The problems with the client endured a lot longer than the issues with the backend, however. By the early 2000s, every significant programming language community could build HTTP services, but the client&amp;rsquo;s abilities stagnated. (It was almost like some major force was acting in bad faith to keep the open web from advancing. But why? And who? It&amp;rsquo;s a mystery, one I suppose we&amp;rsquo;ll never resolve&amp;hellip;)&lt;/p&gt;
&lt;p&gt;The open web evolved on its own. It HTTP &lt;code&gt;PATCH&lt;/code&gt; &amp;rsquo;ed itself. In the late 90s, we got PayPal to make secure commerce possible. In the early 2000s, we got the constraint on HTTP called REST (which stands for Really Easy Service Transactions, or was it REcent Software Trend? No. That&amp;rsquo;s not right. Representational State Transfer! That sounds right&amp;hellip;). And then &amp;ldquo;Ajax&amp;rdquo; (no, &lt;em&gt;not&lt;/em&gt; the cleaning product) &lt;a href="http://www.jjg.net/about/"&gt;arrived&lt;/a&gt;, which allowed the client to make requests of the service in-situ, without forcing another HTTP roundtrip to the service to fetch a new page. Lovely. Then we spent an agonizing five years or so trying to find ways to push data from the server to the client instead of sending data to a client in response to the client&amp;rsquo;s request. &lt;/p&gt;
&lt;p&gt;And we did try &lt;em&gt;everything&lt;/em&gt;. There were kludges upon kludges. (Here&amp;rsquo;s a fun fact: janky JavaScript existed &lt;em&gt;years&lt;/em&gt; before Node.js arrived!) Eventually, in 2011, we got a standard that all the HTTP browser vendors and HTTP server vendors could support consistently, and that solved 70% of our needs: &lt;a href="https://en.wikipedia.org/wiki/WebSocket"&gt;WebSockets&lt;/a&gt;. Websockets are awesome! They&amp;rsquo;re the best way to introduce asynchronous communication to a browser-based application. They&amp;rsquo;re fast, they&amp;rsquo;re lightweight and easy to implement. &lt;/p&gt;
&lt;p&gt;While there are many frameworks that you can use to implement WebSocket endpoints, you needn&amp;rsquo;t look any further than Spring as it&amp;rsquo;s supported out of the box for both reactive and non-reactive services. Let&amp;rsquo;s look at a service example using Spring Webflux, the reactive web runtime. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reactive Web on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.main.web-application-type=reactive&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.websockets.service;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.web.reactive.HandlerMapping;&#xD;
import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;&#xD;
import org.springframework.web.reactive.socket.WebSocketHandler;&#xD;
import org.springframework.web.reactive.socket.WebSocketMessage;&#xD;
import org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter;&#xD;
import reactor.core.publisher.Flux;&#xD;
&#xD;
import java.util.Map;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;wsserver&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	SimpleUrlHandlerMapping greetingsHm() {&#xD;
		return new SimpleUrlHandlerMapping(Map.of(&amp;quot;/ws/greetings&amp;quot;, greetingsWsh()), 10);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	WebSocketHandler greetingsWsh() {&#xD;
		return session -&amp;gt; {&#xD;
&#xD;
			Flux&amp;lt;WebSocketMessage&amp;gt; out = session.receive().map(WebSocketMessage::getPayloadAsText)&#xD;
					.flatMap(name -&amp;gt; Flux.just(&amp;quot;Hi, &amp;quot; + name).map(session::textMessage));&#xD;
&#xD;
			return session.send(out);&#xD;
		};&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;SimpleUrlHandlerMapping&lt;/code&gt; maps the &lt;code&gt;WebSocketHandler&lt;/code&gt; to an HTTP URI. The &lt;code&gt;WebSocketHandler&lt;/code&gt; provides the reactive WebSocket endpoint logic, turning the incoming payload (a name) into a greeting (&lt;code&gt;Hi, NAME!&lt;/code&gt;) to be sent to the client.&lt;/p&gt;
&lt;p&gt;Now, I&amp;rsquo;m going to do something that I would not normally do. If there were &lt;em&gt;any&lt;/em&gt; other way, friends, I would surely prefer that alternative to this rather unbecoming way forward. I would not do this in polite company, but I feel there&amp;rsquo;s no other way to get this done, no other way to demonstrate how trivial it can be to communicate with a WebSocket endpoint. I do not do this lightly. &lt;/p&gt;
&lt;p&gt;I.. am going to use JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;    window.addEventListener(&amp;#39;load&amp;#39;, () =&amp;gt; {&#xD;
        const ws = new WebSocket(&amp;#39;ws://localhost:8080/ws/greetings&amp;#39;)&#xD;
        ws.addEventListener(&amp;#39;open&amp;#39;, () =&amp;gt; {&#xD;
            ws.send(&amp;#39;JavaScript Fans&amp;#39;)&#xD;
        })&#xD;
        ws.addEventListener(&amp;#39;message&amp;#39;, (message) =&amp;gt; {&#xD;
            console.log(message.data)&#xD;
        })&#xD;
    })&#xD;
&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, we set up a &lt;code&gt;WebSocket&lt;/code&gt; object in JavaScript, register a callback to send data on the WebSocket when it was finally ready, and register another callback for any replies that arrive. Go to your browser&amp;rsquo;s &lt;em&gt;Developer Tools&lt;/em&gt; (instructions vary for each browser, but you might try &lt;code&gt;OPTION&lt;/code&gt; + &lt;code&gt;CMD&lt;/code&gt; + &lt;code&gt;I&lt;/code&gt; if you&amp;rsquo;re on a Mac and using Chrome or Firefox) and then choose &lt;code&gt;Console&lt;/code&gt;. You&amp;rsquo;ll see the response from the WebSocket endpoint there. &lt;/p&gt;
&lt;p&gt;With more code, we can also talk to that service using the Spring &lt;code&gt;WebSocketClient&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reactive Web on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.websockets.client;&#xD;
&#xD;
import lombok.SneakyThrows;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.web.reactive.socket.WebSocketMessage;&#xD;
import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;&#xD;
import org.springframework.web.reactive.socket.client.WebSocketClient;&#xD;
import reactor.core.publisher.Mono;&#xD;
&#xD;
import java.net.URI;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	@SneakyThrows&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;wsclient&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
		Thread.sleep(5_000);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	WebSocketClient webSocketClient() {&#xD;
		return new ReactorNettyWebSocketClient();&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready(WebSocketClient client) {&#xD;
		return event -&amp;gt; client.execute(URI.create(&amp;quot;ws://localhost:8080/ws/greetings&amp;quot;), webSocketSession -&amp;gt; {&#xD;
			WebSocketMessage world = webSocketSession.textMessage(&amp;quot;Spring Fans&amp;quot;);&#xD;
			return webSocketSession.send(Mono.just(world))&#xD;
					.thenMany(webSocketSession.receive().map(WebSocketMessage::getPayloadAsText).log()).then();&#xD;
		})//&#xD;
				.subscribe();&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.main.web-application-type=none
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WebSockets make our browser-based clients more lively. I quite prefer RSocket for service-to-service communication, however. &lt;/p&gt;
&lt;p&gt;Did you like this gem at a glance approach? Did you learn anything? As always, I&amp;rsquo;m keen on hearing from you, so &lt;a href="http://twitter.com/starbuxman"&gt;please sound off on Twitter (@starbuxman) &lt;/a&gt;! I&amp;rsquo;ll be back with another installment of &lt;em&gt;YMNNALFT&lt;/em&gt;, so be sure not to miss that. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast - Spring Tools lead Martin Lippert on sustainable software</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/21/a-bootiful-podcast-spring-tools-lead-martin-lippert-on-sustainable-software" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-22:4343</id>
    <updated>2021-01-22T03:26:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Spring Tools lead &lt;a href="https://twitter.com/martinlippert"&gt;Martin Lippert (@martinlippert)&lt;/a&gt; about sustainability in software, specifically, and I.T., generally. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the slides to Martin&amp;rsquo;s talk &lt;a href="https://speakerdeck.com/martinlippert/sustainability-in-software-engineering-eclipsecon-2020-edition"&gt;&lt;em&gt;Sustainability in Software Engineering&lt;/em&gt;&lt;/a&gt;, as presented at EclipseCON 2020&lt;/li&gt;
  &lt;li&gt;and &lt;a href="https://www.youtube.com/watch?v=ZsJVhEy0ka4"&gt;here is the video for that talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe title="Spring Tools lead Martin Lippert on sustainable software" height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/frsdq-f846d9?from=pb6admin&amp;download=1&amp;version=1&amp;auto=0&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Helvetica&amp;skin=1&amp;pfauth=&amp;btn-skin=107"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.5.0-M1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/21/spring-boot-2-5-0-m1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Madhura Bhave</name>
    </author>
    <id>tag:spring.io,2021-01-22:4342</id>
    <updated>2021-01-22T02:36:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the first milestone of Spring Boot 2.5 has been released and is available from our &lt;a href="https://repo.spring.io/milestone/"&gt;milestone repository&lt;/a&gt;. This release closes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.5.0-M1"&gt;over 130 issues and pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highlights of this first milestone include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for GET requests to the startup endpoint&lt;/li&gt;
  &lt;li&gt;Security improvements to the info endpoint&lt;/li&gt;
  &lt;li&gt;Preliminary support for Java 16&lt;/li&gt;
  &lt;li&gt;Spring Integration 5.5.0 M1&lt;/li&gt;
  &lt;li&gt;Spring Data 2021.0.0 M1&lt;/li&gt;
  &lt;li&gt;Spring Security 5.5.0 M1&lt;/li&gt;
  &lt;li&gt;Spring Session 2021.0.0 M1&lt;/li&gt;
  &lt;li&gt;Spring HATEOAS 1.3.0 M1&lt;/li&gt;
  &lt;li&gt;Numerous other dependency upgrades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes and upgrade instructions, please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5.0-M1-Release-Notes"&gt;Spring Boot 2.5 Release Notes&lt;/a&gt; on the wiki and the &lt;a href="https://docs.spring.io/spring-boot/docs/2.5.0-M1/reference/html/"&gt;updated reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to get started with 2.5 and try out the new features, you can bootstrap a new project on &lt;a href="https://start.spring.io/#!type=maven-project&amp;language=java&amp;platformVersion=2.5.0.M1&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=com.example&amp;artifactId=demo&amp;name=demo&amp;description=Demo%20project%20for%20Spring%20Boot&amp;packageName=com.example.demo"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-boot/docs/2.5.0-M1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Bootiful Application Monitoring with Azure Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/21/bootiful-application-monitoring-with-azure-spring-cloud" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-21:4341</id>
    <updated>2021-01-21T18:15:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;This is a guest post authored by our friend, Microsoft&amp;rsquo;s Asir Vedamuthu Selvasingh &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi, Spring fans! We are excited to announce that Application Performance Monitoring (APM) is now fully integrated into Azure Spring Cloud, powered by Application Insights.&lt;/p&gt;
&lt;p&gt;Azure Spring Cloud is jointly built, operated, and supported by Microsoft and VMware. It is a fully managed service for Spring Boot applications that lets you focus on building the applications that run your business without the hassle of managing infrastructure. &lt;/p&gt;
&lt;p&gt;APM in Azure Spring Cloud offers in-depth performance monitoring for your Spring applications without requiring ANY code changes, recompiling, retesting, or redeployment. APM on Azure Spring Cloud is so seamless that you get the insights on your applications just out of the box. You do not have to do ANYTHING - just deploy your applications and the monitoring data starts flowing. The benefits you get with application monitoring are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Visibility into all your applications with &lt;strong&gt;distributed tracing&lt;/strong&gt;, including paths of operation requests from origins to destinations and insights into applications that are operating correctly and those with bottlenecks.&lt;/li&gt;
  &lt;li&gt;Logs, exceptions, and metrics in the context of call paths offer &lt;strong&gt;meaningful insights and actionable information&lt;/strong&gt; to speed root cause analysis.&lt;/li&gt;
  &lt;li&gt;Insights into application &lt;strong&gt;dependencies&lt;/strong&gt; ? SQL Database, MySQL, PostgreSQL, MariaDB, JDBC, MongoDB, Cassandra, Redis, JMS, Kafka, Netty / WebFlux, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance data&lt;/strong&gt; for every call into operations exposed by applications, including data-like request counts, response times, CPU usage, and memory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom metrics&lt;/strong&gt; conveniently auto-collected through Micrometer, allowing you to publish custom performance indicators or business-specific metrics and visualize deeper application and business insights.&lt;/li&gt;
  &lt;li&gt;Ability to &lt;strong&gt;browse, query, and alert on application metrics and logs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While both Azure Spring Cloud and Application Insights Java agent are generally available, their integration for out of the box monitoring is in preview.&lt;/p&gt;
&lt;p&gt;You can enable the Java in-process monitoring agent when you create or update Azure Spring Cloud:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;az spring-cloud create --name ${SPRING_CLOUD_SERVICE} &#xD;
        --sku standard --enable-java-agent &#xD;
        --resource-group ${RESOURCE_GROUP} &#xD;
        --location ${REGION}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can open Application Insights created by Azure Spring Cloud and start monitoring applications and their dependencies ? we will illustrate this using a &lt;a href="https://github.com/Azure-Samples/spring-petclinic-microservices"&gt;distributed version of Spring Petclinic&lt;/a&gt;. Navigate to the &lt;code&gt;Application Map&lt;/code&gt; blade where you can see an incredible, holistic view of microservices that shows applications that are operating correctly (green) and those with bottlenecks (red) [Figure 1]. Developers can easily identify issues in their applications and quickly troubleshoot and fix them.&lt;/p&gt;
&lt;figcaption &gt; Figure 1 - Microservice transactions in Application Insights &lt;/figcaption&gt;
&lt;img  width="700" src ="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/distributed-tracking-new-ai-agent.jpg" /&gt;
&lt;p&gt;Navigate to the &lt;code&gt;Performance&lt;/code&gt; blade where you can see response times and request counts for operations exposed by your applications [Figure 2]. &lt;/p&gt;
&lt;figcaption &gt; &#xD;
Figure 2 ? Performance of operations exposed by applications &lt;/figcaption&gt;
&lt;img width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-performance.jpg" /&gt;
&lt;p&gt;Navigate to the &lt;code&gt;Dependencies&lt;/code&gt; tab in the &lt;code&gt;Performance&lt;/code&gt; blade where you can see all your dependencies and their response times and request counts [Figure 3]. &lt;/p&gt;
&lt;figcaption&gt;Figure 3 ? Performance of application dependencies&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-insights-on-dependencies.jpg" /&gt;
&lt;p&gt;You can click a SQL call or a dependency to see the full end-to-end transaction in context [Figure 4].&lt;/p&gt;
&lt;figcaption&gt;&#xD;
Figure 4 ? End-to-end application to SQL call transaction details&#xD;
&lt;/figcaption&gt;
&lt;img width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-end-to-end-transaction-details.jpg" /&gt;
&lt;p&gt;Navigate to the &lt;code&gt;Exceptions&lt;/code&gt; tab in the &lt;code&gt;Failures&lt;/code&gt; blade to see a collection of exceptions thrown by applications [Figure 5].&lt;/p&gt;
&lt;figcaption&gt;Figure 5 ? Exceptions thrown by applications&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-failures-exceptions.jpg" /&gt;
&lt;p&gt;Simply select an exception and drill in for meaningful insights and actionable stack trace [Figure 6].&lt;/p&gt;
&lt;figcaption&gt;Figure 6 ? End-to-end transaction details for an application exception&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/end-to-end-transaction-details.jpg" /&gt;
&lt;p&gt;Navigate to the &lt;code&gt;Metrics&lt;/code&gt; blade to see all the metrics contributed by Spring Boot applications, Spring Cloud modules, and their dependencies. The chart below showcases &lt;code&gt;gateway-requests&lt;/code&gt; contributed by Spring Cloud Gateway and &lt;code&gt;hikaricp_connections&lt;/code&gt; contributed by JDBC [Figure 7]. Similarly, you can aggregate Spring Cloud Resilience4J metrics and visualize them.&lt;/p&gt;
&lt;figcaption&gt;Figure 7 ? Metrics contributed by Spring modules&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-metrics.jpg" /&gt;
&lt;p&gt;Spring Boot applications register a lot of core metrics ? JVM, CPU, Tomcat, Logback, etc. You can use Micrometer to contribute your own custom metrics, say using the &lt;code&gt;@Timed&lt;/code&gt; Micrometer annotation at the class level. You can then visualize those custom metrics in Application Insights. As an example, see how pet owners, pets, and their clinical visits are tracked by custom metrics below ? you can also see how the pattern changes at 9 PM because applications are driving higher utilization when autoscaling kicked in [Figure 8].&lt;/p&gt;
&lt;figcaption&gt;Figure 8 ? Custom metrics published by user applications&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-custom-metrics.jpg" /&gt;
&lt;p&gt;You can use the Availability Test feature in Application Insights to monitor the availability of applications in Azure Spring Cloud. This is a recurring test to monitor the availability and responsiveness of applications at regular intervals from anywhere across the globe. It can proactively alert you if your applications are not responding or if they respond too slowly. The chart below shows availability tests from across North America ? West US, South Central, Central US and East US [Figure 9].&lt;/p&gt;
&lt;figcaption&gt;Figure 9 ? Availability of application endpoints across time&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-availability.jpg" /&gt;
&lt;p&gt;Navigate to the &lt;code&gt;Live Metrics&lt;/code&gt; blade where you can see live metrics practically in real-time, within only one second [Figure 10]. &lt;/p&gt;
&lt;figcaption&gt;Figure 10 ? Real-time metrics&#xD;
&lt;/figcaption&gt;
&lt;img  width="700" src="https://github.com/Azure-Samples/spring-petclinic-microservices/raw/azure/media/petclinic-microservices-live-metrics.jpg" /&gt;
&lt;p&gt;Application Insights Java agent is based on &lt;a href="https://opentelemetry.io/docs/java/automatic_instrumentation/"&gt;OpenTelemetry&lt;/a&gt; auto instrumentation effort, where Microsoft collaborates with other brightest minds of the APM space.&lt;/p&gt;&lt;h2&gt;&lt;a href="#build-your-solutions-and-monitor-them-today" class="anchor" name="build-your-solutions-and-monitor-them-today"&gt;&lt;/a&gt;Build your solutions and monitor them today!&lt;/h2&gt;
&lt;p&gt;Azure Spring Cloud abstracts away the complexity of infrastructure management and Spring Cloud middleware management, so you can focus on building your business logic and let Azure take care of dynamic scaling, patches, security, compliance, and high availability. With a few steps, you can provision Azure Spring Cloud, create applications, deploy, and scale Spring Boot applications, and start monitoring in minutes. We will continue to bring more developer-friendly and enterprise-ready features to Azure Spring Cloud.&lt;/p&gt;
&lt;p&gt;We would love to hear how you are building impactful solutions using Azure Spring Cloud. Get started today ? deploy Spring applications to Azure Spring Cloud using &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/spring-cloud-quickstart?tabs=Azure-CLI&amp;pivots=programming-language-java"&gt;quickstart&lt;/a&gt;!&lt;/p&gt;&lt;h2&gt;&lt;a href="#resources" class="anchor" name="resources"&gt;&lt;/a&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Get started with your next Spring Boot-based project at &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn using an &lt;a href="https://docs.microsoft.com/en-us/learn/modules/azure-spring-cloud-workshop/"&gt;MS Learn module&lt;/a&gt; or &lt;a href="https://github.com/microsoft/azure-spring-cloud-training"&gt;self-paced workshop&lt;/a&gt; on GitHub&lt;/li&gt;
  &lt;li&gt;Learn &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/"&gt;more&lt;/a&gt; about implementing solutions on Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;Learn &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/spring-cloud-howto-application-insights"&gt;more&lt;/a&gt; about Application Insights &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/java-in-process-agent"&gt;Java in-process&lt;/a&gt; agent in Azure Spring Cloud, including &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/spring-cloud-howto-circuit-breaker-metrics"&gt;Spring Cloud Resilience4J Circuit Breaker&lt;/a&gt; metrics&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/Azure-Samples/spring-petclinic-microservices"&gt;Deploy&lt;/a&gt; a distributed version of Spring Petclinic built with Spring Cloud&lt;/li&gt;
  &lt;li&gt;Migrate your &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-boot-to-azure-spring-cloud"&gt;Spring Boot&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-cloud-to-azure-spring-cloud"&gt;Spring Cloud&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-tomcat-to-azure-spring-cloud"&gt;Tomcat&lt;/a&gt; applications to Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;Wire Spring applications to &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/spring-framework/"&gt;interact with Azure services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For feedback and questions, &lt;a href="mailto:AzureSpringCloud-Talk@service.microsoft.com"&gt;please e-mail us&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>YMNNALFT:  Dimensional Metrics Accumulation with Micrometer</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/20/ymnnalft-dimensional-metrics-accumulation-with-micrometer" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-30:4321</id>
    <updated>2021-01-20T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;You May Not Need Another Library For That&lt;/em&gt; (YMNNALFT)! I&amp;rsquo;ve spent a lot of time since 2016 illuminating (or trying to, anyway!) some of the more enormous opportunities in the Spring ecosystem in &lt;a href="http://bit.ly/spring-tips-playlist"&gt;my Spring Tips videos&lt;/a&gt;. Today, however, I come to you in a different spirit, wanting to focus on the little, sometimes hidden, gems that do fantastic things and that might spare you an additional third-party dependency and its implied complexity. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s 3 AM. Do you know where your production KPI Metrics are? You can&amp;rsquo;t improve that you can&amp;rsquo;t measure, and metrics are an important part of this. Without metrics, we&amp;rsquo;re utterly and hopelessly lost, trapped in a spiraling death-march project with no sign or hope of any improvement! Tremble, ye wretched and miserable developer! Without metrics, we&amp;rsquo;re blind, and there&amp;rsquo;s nothing funny about that, so instead, here&amp;rsquo;s a photo of my daughter&amp;rsquo;s adorable little guinea pig, Kai:&lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/Ef7FS3yUEAEE5oF?format=jpg&amp;name=large" width = "500" /&gt;
&lt;p&gt;Metrics give us a way to describe specific facts about our system - it lets us quantify essential data, which is nice since there are all sorts of things to count and quantify: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how many people have clicked the &amp;lsquo;check out&amp;rsquo; button?&lt;/li&gt;
  &lt;li&gt;How many people have signed up?&lt;/li&gt;
  &lt;li&gt;How long are requests to a particular endpoint taking?&lt;/li&gt;
  &lt;li&gt;How many people are experiencing errors?&lt;/li&gt;
  &lt;li&gt;What is the average time for a given request? (Or, more usefully, what&amp;rsquo;s the 99th percentile of a given request?&lt;/li&gt;
  &lt;li&gt;Bob, did you get your TPS reports in? Oh _ c&amp;rsquo;mon_, Bob! We talked about this! You said you&amp;rsquo;d get it in by close-of-business Tuesday, you absolute scoundrel!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s a real art to learning about which metrics to capture and which are irrelevant. Whole careers, even! &amp;ldquo;Growth hacker,&amp;rdquo; anyone? Not all metrics are created equal. &lt;em&gt;Growth hackers&lt;/em&gt; care about metrics. Product managers will care about metrics. The business will care about metrics. Your platform can care about metrics. &lt;em&gt;You&lt;/em&gt; should care about metrics. And why not? All the data&amp;rsquo;s there for the taking, but you&amp;rsquo;ll need a robust framework to help you. Writing code to instrument your code and capture metrics is only half the battle. Once captured, you&amp;rsquo;ll want (need!) to store and analyze the metrics. To do so, you&amp;rsquo;ll use a time series database - something like &lt;a href="https://tanzu.vmware.com/observability"&gt;VMWare&amp;rsquo;s Wavefront&lt;/a&gt;, &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;, &lt;a href="https://github.com/Netflix/atlas"&gt;Netflix Atlas&lt;/a&gt;, &lt;a href="https://www.datadoghq.com/"&gt;DataDog&lt;/a&gt;, &lt;a href="http://instana.com"&gt;Instana&lt;/a&gt;, etc., to then visualize and analyze that data. You&amp;rsquo;ll need a robust framework that supports capturing all sorts of metrics (timers, counters, histograms, averages, etc.) in all sorts of contexts and then emitting those metrics to all sorts of time series databases (TSDBs). &lt;/p&gt;
&lt;p&gt;Enter &lt;a href="http://micrometer.io"&gt;Micrometer&lt;/a&gt;. Micrometer allows you to instrument your code with dimensional metrics with a vendor-neutral interface and decide at the last step which monitoring system you&amp;rsquo;d like to use. Instrumenting your core library code with Micrometer allows the libraries to be included in applications that ship metrics to different backends. Spring Boot provides the Actuator module to support capturing and observing different aspects of an application. It sports endpoints of things like an application&amp;rsquo;s health, the thread dumps, and countless other things. It has an endpoint, &lt;code&gt;/actuator/metrics&lt;/code&gt;, that depends on Micrometer, giving you an at-a-glance view of the metrics being captured by your Spring Boot application, independent of whether you&amp;rsquo;re also publishing those metrics to a TSDB. &lt;/p&gt;
&lt;p&gt;Keep in mind that Spring depends on Micrometer, but Micrometer does not depend on Spring. Many libraries instrument themselves using the Micrometer SPI. All you need to do is add integration with a TSDB. Here are some of the third-party libraries that emit metrics with Micrometer: Javalin, HikariCP, the RabbitMQ Java client, Redisson, the Brave distributed tracing client, Netflix Spinnaker, the Netty-powered, non-blocking, Armeria framework, the Alibaba Nacos client, Apache Geode, the Microsoft Azure Spring Boot integrations, Resilience4J, the reactive Playtika Feign-client, Openrewrite, Apache Camel, the Couchbase Java DCP client, and literally hundreds of others. Oh, did I mention that countless modules in the Spring ecosystem support it as well? Yes, Micrometer truly is &lt;em&gt;everywhere&lt;/em&gt; you want to be! &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re using Spring, of course, so it&amp;rsquo;s easier to just add the Spring Boot Actuator module to the build. If you want to support a particular TSBD, you&amp;rsquo;ll have to bring in the specific module for that particular integration. Some Micrometer integrations come complete with a full Spring Boot integration, too, so you can use those if you want in lieu of the direct Micrometer integration. VMware Wavefront is one such TSDB that ships with extensive and rich integration with Spring Boot, so I&amp;rsquo;ll bring in that superset integration here.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at a simple service. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;Actuator on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Wavefront on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;com.wavefront&lt;/code&gt; : &lt;code&gt;wavefront-spring-boot-starter&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, I create two counter metrics for the statistic about my coffee consumption for the day. I add one extra dimension to the data: whether the coffee had caffeine or not.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.metrics;&#xD;
&#xD;
import io.micrometer.core.instrument.Counter;&#xD;
import io.micrometer.core.instrument.MeterRegistry;&#xD;
import io.micrometer.core.instrument.Timer;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
import java.time.Duration;&#xD;
import java.util.concurrent.TimeUnit;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;metrics&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready(MeterRegistry registry) {&#xD;
		return event -&amp;gt; {&#xD;
&#xD;
			// http://localhost:8080/actuator/metrics/coffees&#xD;
			String metricsKey = &amp;quot;coffees&amp;quot;;&#xD;
			Counter decaffeinated = registry.counter(metricsKey, &amp;quot;caffeine&amp;quot;, &amp;quot;false&amp;quot;);&#xD;
			Counter caffeinated = registry.counter(metricsKey, &amp;quot;caffeine&amp;quot;, &amp;quot;true&amp;quot;);&#xD;
&#xD;
			for (int i = 0; i &amp;lt; (int) (Math.random() * 10); i++)&#xD;
				caffeinated.increment();&#xD;
&#xD;
			for (int i = 0; i &amp;lt; (int) (Math.random() * 10); i++)&#xD;
				decaffeinated.increment();&#xD;
&#xD;
			System.out.println(&amp;quot;caffeinated: &amp;quot; + caffeinated.count());&#xD;
			System.out.println(&amp;quot;decaffeinated: &amp;quot; + decaffeinated.count());&#xD;
&#xD;
			// http://localhost:8080/actuator/metrics/message-print&#xD;
			Timer timer = registry.timer(&amp;quot;message-print&amp;quot;);&#xD;
&#xD;
			for (int i = 0; i &amp;lt; 10; i++)&#xD;
				timer.record(Duration.ofMillis((long) (Math.random() * (10 * 1000))));&#xD;
&#xD;
			System.out.println(&amp;quot;message-print: &amp;quot; + timer.totalTime(TimeUnit.SECONDS));&#xD;
		};&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.main.web-application-type=reactive&#xD;
management.endpoints.web.exposure.include=*&#xD;
management.endpoint.metrics.enabled=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In most entries in this series, I mention possible alternatives to the library under discussion. I don&amp;rsquo;t want to do that here because I haven&amp;rsquo;t really found anything that comes close to Micrometer, and it&amp;rsquo;d be disingenuous if I said I had. Micrometer is a much better solution. Most of the other metrics frameworks you&amp;rsquo;ll find either fail to integrate with as many solutions as Micrometer or, worse, don&amp;rsquo;t support &lt;em&gt;dimensional metrics&lt;/em&gt;. Dimensional metrics refer to metric data that has a variety of attributes (dimensions) attached. These attributes could include duration-related attributes (start and stop time), IDs, metadata attached with the client context, the region of the request, information about the client, information about the endpoint being invoked, host, status code, etc. This amount of detail allows for in-depth analysis and querying. Dimensional metrics mean that it&amp;rsquo;s easier to capture metrics, and it&amp;rsquo;s easier to then drill down into the metrics in an unforeseen way later. Win-win! &lt;/p&gt;
&lt;p&gt;Did you like this gem at a glance approach? Did you learn anything? As always, I&amp;rsquo;m keen on hearing from you, so &lt;a href="http://twitter.com/starbuxman"&gt;please sound off on Twitter (@starbuxman) &lt;/a&gt;! I&amp;rsquo;ll be back with another installment of &lt;em&gt;YMNNALFT&lt;/em&gt;, so be sure not to miss that. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 19th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/19/this-week-in-spring-january-19th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-19:4340</id>
    <updated>2021-01-19T21:53:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! We&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lgyo9c9zdrg&amp;feature=share"&gt;What°Øs new in Spring Boot 2.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/14/a-bootiful-podcast-spring-cloud-stream-lead-oleg-zhurakousky"&gt;A Bootiful Podcast - Spring Cloud Stream lead Oleg Zhurakousky&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/18/ymnnalft-easy-rpc-with-rsocket"&gt;YMNNALFT: Easy RPC with RSocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/13/ymnnalft-express-yourself-with-spel"&gt;YMNNALFT: Express Yourself with SpEL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/brungarc/status/1349910675561324549?s=12"&gt;Check out the Sentry Spring Boot starter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vg7rw4upn3a&amp;feature=share"&gt;Developing Spring Boot applications with Kotlin on Google Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://openjdk.java.net/jeps/8251554"&gt;JEP draft: Primitive Objects (Preview)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/stilkov/status/1351162660453310468?s=12"&gt;@__jpr has integrated Hotwire into a Spring Boot environment &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://inside.java/2021/01/16/new-loom-ea-builds/"&gt;New Loom Early Access Build&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UJVyGUaHUEg"&gt;No matter what the usecase, Azure has your Java apps covered&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.jetbrains.com/kotlin/2021/01/results-of-the-first-kotlin-multiplatform-survey/"&gt;On the JetBrains Blog: Results of the First Kotlin Multiplatform Survey &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/14/spring-boot-2-2-13-available-now"&gt;Spring Boot 2.2.13 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/14/spring-boot-2-3-8-available-now"&gt;Spring Boot 2.3.8 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/14/spring-boot-2-4-2-available-now"&gt;Spring Boot 2.4.2 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/13/spring-data-2020-0-3-and-2021-0-m2-released"&gt;Spring Data 2020.0.3 and 2021.0-M2 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/13/the-latest-on-azure-active-directory-integration"&gt;The latest on Azure Active Directory integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>YMNNALFT: Easy RPC with RSocket</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/18/ymnnalft-easy-rpc-with-rsocket" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-30:4320</id>
    <updated>2021-01-18T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;You May Not Need Another Library For That&lt;/em&gt; (YMNNALFT)! I&amp;rsquo;ve spent a lot of time since 2016 illuminating (or trying to, anyway!) some of the more enormous opportunities in the Spring ecosystem in &lt;a href="http://bit.ly/spring-tips-playlist"&gt;my Spring Tips videos&lt;/a&gt;. Today, however, I come to you in a different spirit, wanting to focus on the little, sometimes hidden, gems that do fantastic things and that might spare you an additional third-party dependency and its implied complexity. &lt;/p&gt;
&lt;p&gt;Integrating two services separated by a common, potentially volatile, and overwhelmed network is one of the most challenging computer science problems. &lt;/p&gt;
&lt;p&gt;Quick aside: the most challenging problem in computer science is, of course, vertical layouts in CSS. &lt;/p&gt;
&lt;img src="https://blog.appstudio.dev/wp-content/uploads/2018/12/css.gif" /&gt;
&lt;p&gt;You could write a whole book about the different ways to integrate disparate systems and services. But, &lt;a href="https://twitter.com/ghohpe"&gt;Gregor Hohpe&lt;/a&gt; and &lt;a href="https://twitter.com/bobby_woolf"&gt;Bobby Woolf&lt;/a&gt; already did just that with their &lt;a href="https://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683"&gt;&lt;em&gt;Enterprise Integration Patterns&lt;/em&gt;&lt;/a&gt; book, so I&amp;rsquo;ll use one of their lists.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Messaging&lt;/em&gt; is where a producer sends a message (with an enveloper and a payload) to a reliable, intermediary broker. That broker acts as the delivery service for messages between the producer and the consumer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RPC&lt;/em&gt;, or Remote Proxy Calls.., not that&amp;rsquo;s not it. Risky Procedure Calls? No&amp;hellip; Relatively Painless Calamities? No&amp;hellip; Remote Procedure Calls! That&amp;rsquo;s the stuff. RPC is where a consumer invokes methods (through some sort of network protocol like SOAP-RPC, Hessian, Burlap, Spring&amp;rsquo;s own HTTP Invoker, XML RPC, EJBs, RMI, DCOM, CORBA, etc.) on remote objects. The experience is meant to feel like invoking methods on a local object in the same virtual machine.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;File Transfer&lt;/em&gt; is where a producer transmits a file to a shared, agreed-upon (network) file system, and the consumer consumes messages deposited there. This is the basis of so many batch processes today. If you haven&amp;rsquo;t, you should check out Spring Batch. 9/10 dentists agree: Spring Batch keeps teeth clean and integration processes lean. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Shared databases&lt;/em&gt; is where a producer and a consumer read data from the same table (not recommended). Indeed, this one is a bit of an antipattern at this point, particularly in the context of microservices. &lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s definitely a discussion to be had around RPC&amp;rsquo;s merits versus messaging as a way to reliably integrate a producer and a consumer, but &lt;em&gt;this&lt;/em&gt; is not that discussion because I think I&amp;rsquo;ve found the best compromise: reactive, payload-agnostic, lightning-quick, observable, RSocket. &lt;a href="http://RSocket.io"&gt;RSocket&lt;/a&gt; is a binary protocol initially developed by engineers at Netflix who left and continued their work at Facebook. The protocol is built for scale &lt;em&gt;and&lt;/em&gt; speed and circumvents many of the limitations of HTTP 1-2 and gRPC. It is an endlessly exciting protocol for a ton of reasons: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it supports proper bidirectional communication&lt;/li&gt;
  &lt;li&gt;it supports many different message exchange patterns beyond mere request/response&lt;/li&gt;
  &lt;li&gt;it supports metadata to propagate out-of-band-information like tokens&lt;/li&gt;
  &lt;li&gt;it reifies the Reactive Streams specification concepts at the network protocol level (backpressure! On the wire! Huzzah!)&lt;/li&gt;
  &lt;li&gt;It has a cool &lt;code&gt;.io&lt;/code&gt; domain, which everybody knows is critical to the success of technologies destined for the cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s a message envelope-centric protocol, but it is trivial to use, and it&amp;rsquo;s even more trivial to live that RPC-life if you want to.&lt;/p&gt;
&lt;p&gt;There are numerous clients available for various languages, including Java. The Java client is built on top of &lt;a href="http://ProjectReactor.io"&gt;Project Reactor&lt;/a&gt;. It would&amp;rsquo;ve been &lt;em&gt;trivial&lt;/em&gt; - &lt;em&gt;TRIVIAL! I say&lt;/em&gt; - to integrate RSocket into a Spring application even if there were no native support in Spring itself. But there &lt;em&gt;is&lt;/em&gt; native support in Spring itself, and it&amp;rsquo;s incredible. The integration uses the same component model as the original WebSocket support from Spring Framework 4 uses. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at a simple example service. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RSocket on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.rpc.server;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.messaging.handler.annotation.DestinationVariable;&#xD;
import org.springframework.messaging.handler.annotation.MessageMapping;&#xD;
import org.springframework.messaging.handler.annotation.Payload;&#xD;
import org.springframework.stereotype.Controller;&#xD;
&#xD;
import java.util.Locale;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;rpcserver&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
	}&#xD;
&#xD;
}&#xD;
&#xD;
@Controller&#xD;
class GreetingsController {&#xD;
&#xD;
	@MessageMapping(&amp;quot;greetings.{lang}&amp;quot;)&#xD;
	String greet(@DestinationVariable(&amp;quot;lang&amp;quot;) Locale lang, @Payload String name) {&#xD;
		System.out.println(&amp;quot;locale: &amp;quot; + lang.getLanguage());&#xD;
		return &amp;quot;Hello, &amp;quot; + name + &amp;quot;!&amp;quot;;&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.rsocket.server.port=8888&#xD;
spring.main.web-application-type=none
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A controller is an object with methods, like RPC, but the client isn&amp;rsquo;t strictly speaking obliged to wait for a response. It can background the thread or disconnect entirely. Win-win. The protocol is more envelope-and-payload-centric behind the scenes than the component model lets on, so we get the best of both worlds. &lt;/p&gt;
&lt;p&gt;Our service is up and running. If you want to invoke it, you can use &lt;a href="https://github.com/making/rsc"&gt;the handy-dandy &lt;code&gt;rsc&lt;/code&gt; CLI&lt;/a&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;rsc tcp://localhost:8888  -r greetings.en -d &amp;#39;Josh&amp;#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get output like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;Hello, Josh!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That might be enough, but most of us will want to talk to our RSocket services from our client code. There are clients from several different programming languages, including, but not limited to, JavaScript, Go, .NET (C#), Rust, C++, Ruby, Python, and more. (and, worst case, you can always wrap the C++ or Java ports, right?) &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at building a client to talk to the newly-minted services. We&amp;rsquo;ll use the &lt;code&gt;RSocketRequester&lt;/code&gt;, a client that we can use to speak to an RSocket endpoint. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependency:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RSocket on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.rpc.client;&#xD;
&#xD;
import lombok.SneakyThrows;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.messaging.rsocket.RSocketRequester;&#xD;
&#xD;
import java.util.Locale;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	@SneakyThrows&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;rpcclient&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
		Thread.sleep(5_000);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	RSocketRequester rSocketRequester(RSocketRequester.Builder builder) {&#xD;
		return builder.tcp(&amp;quot;localhost&amp;quot;, 8888);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready(RSocketRequester rSocketRequester) {&#xD;
		return event -&amp;gt; rSocketRequester //&#xD;
				.route(&amp;quot;greetings.{lang}&amp;quot;, Locale.ENGLISH) //&#xD;
				.data(&amp;quot;World&amp;quot;).retrieveMono(String.class)//&#xD;
				.subscribe(greetings -&amp;gt; System.out.println(&amp;quot;got: &amp;quot; + greetings));&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.main.web-application-type=none
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Here, you can see that the default client experience of an RSocket service is more like that of an HTTP endpoint or an exchange with a message queue. We&amp;rsquo;re sending request messages to endpoints, which are more like URIs, not distributed methods. That said, if you &lt;em&gt;really&lt;/em&gt; are all about that RPC life and don&amp;rsquo;t mind an &lt;em&gt;optional&lt;/em&gt; extra dependency. You &lt;em&gt;might&lt;/em&gt; &lt;a href="http://github.com/spring-projects-experimental"&gt;consider the &lt;em&gt;experimental&lt;/em&gt; Spring Retrosocket project&lt;/a&gt;, which we launched to support this use case precisely. It provides a Netflix-feign like RPC experience, but for RSocket. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Did you like this gem at a glance approach? Did you learn anything? As always, I&amp;rsquo;m keen on hearing from you, so &lt;a href="http://twitter.com/starbuxman"&gt;please sound off on Twitter (@starbuxman) &lt;/a&gt;! I&amp;rsquo;ll be back with another installment of &lt;em&gt;YMNNALFT&lt;/em&gt;, so be sure not to miss that. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Boot 2.4</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/17/what-s-new-in-spring-boot-2-4" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2021-01-17:4339</id>
    <updated>2021-01-17T16:48:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: &lt;a href="http://twitter.com/phillip_webb"&gt;Phil Webb (@phillip_webb)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sorry for the small font! You might want to watch this at a computer in full screen.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lgyO9C9zdrg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;h2&gt;&lt;a href="#timecodes" class="anchor" name="timecodes"&gt;&lt;/a&gt;Timecodes&lt;/h2&gt;
&lt;p&gt;Use the timecodes below if you want to jump to a specific part of the presentation:&lt;/p&gt;&lt;h3&gt;&lt;a href="#intro" class="anchor" name="intro"&gt;&lt;/a&gt;Intro&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0027s"&gt;00:27&lt;/a&gt; - Creating a Demo App&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#upgrading" class="anchor" name="upgrading"&gt;&lt;/a&gt;Upgrading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0444s"&gt;07:24&lt;/a&gt; - Version Number Changes&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0509s"&gt;08:29&lt;/a&gt; - JUnit Vintage Engine&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0547s"&gt;09:07&lt;/a&gt; - Legacy Config Data Mode&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0648s"&gt;10:48&lt;/a&gt; - Logback Property Changes and Property Migrator&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#new-features" class="anchor" name="new-features"&gt;&lt;/a&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0831s"&gt;13:51&lt;/a&gt; - Java 15 and Startup Logging&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=0903s"&gt;15:03&lt;/a&gt; - Constructor Binding @ConfigurationProperties Updates&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=1091s"&gt;18:11&lt;/a&gt; - ApplicationStartup Metrics (Flight Recorder and JSON)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=1489s"&gt;24:49&lt;/a&gt; - Changes to Application properties/yaml&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=1846s"&gt;30:46&lt;/a&gt; - Using &amp;lsquo;spring.config.import&amp;rsquo;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2086s"&gt;34:46&lt;/a&gt; - Importing Files Without an Extension&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2128s"&gt;35:28&lt;/a&gt; - Origin Chains&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2314s"&gt;38:34&lt;/a&gt; - Config Tree Support (Kubernetes Volume Mounted Secrets)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2451s"&gt;40:51&lt;/a&gt; - Supporting Custom Config Data Import Types&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2577s"&gt;42:57&lt;/a&gt; - Docker and Buildpack Updates&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/lgyO9C9zdrg?t=2769s"&gt;46:09&lt;/a&gt; - Publishing to a Private Docker Registry&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#links" class="anchor" name="links"&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;p&gt;The following links are useful for the presentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.4-Release-Notes"&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Building OCI Images [&lt;a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#build-image"&gt;Maven&lt;/a&gt;|&lt;a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#build-image"&gt;Gradle&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc"&gt;Contributing Instructions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/wagoodman/dive"&gt;Docker Image Inspection Tool (dive)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://goharbor.io/"&gt;Private Docker Registry (Harbor)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.4.2 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/14/spring-boot-2-4-2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2021-01-15:4338</id>
    <updated>2021-01-15T05:36:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.4.2 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.4.2"&gt;a number bug fixes and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.4.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast - Spring Cloud Stream lead Oleg Zhurakousky</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/14/a-bootiful-podcast-spring-cloud-stream-lead-oleg-zhurakousky" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-15:4337</id>
    <updated>2021-01-15T01:58:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;. This week, &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Spring Cloud Stream &lt;a href="https://twitter.com/z_oleg"&gt;lead Oleg Zhurakousky (@z_oleg)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe title="Spring Cloud Stream lead Oleg Zhurakousky" height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/gagc3-f79a60?from=pb6admin&amp;download=1&amp;version=1&amp;auto=0&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Helvetica&amp;skin=1&amp;pfauth=&amp;btn-skin=107"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.3.8 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/14/spring-boot-2-3-8-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Scott Frederick</name>
    </author>
    <id>tag:spring.io,2021-01-14:4336</id>
    <updated>2021-01-14T19:52:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.3.8 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.3.8.RELEASE"&gt;35 bug fixes and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.3.8.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.2.13 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/14/spring-boot-2-2-13-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2021-01-14:4335</id>
    <updated>2021-01-14T17:25:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.2.13 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.2.13.RELEASE"&gt;19 bug fixes and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.13.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>The latest on Azure Active Directory integration</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/13/the-latest-on-azure-active-directory-integration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Andy Clement</name>
    </author>
    <id>tag:spring.io,2021-01-13:4334</id>
    <updated>2021-01-13T20:21:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Whether you are building a web API, mobile front end or a good-old fashioned desktop application, identity and access management will always be foundational pieces that are front and center in writing software. Azure offers a great platform to democratize your application development journey, as it not only offers a cloud-base identity service, but also deep integration with the rest of the Azure ecosystem. Spring Security has made it easy to secure your Spring based applications with powerful abstractions and extensible interfaces. However as powerful as the Spring framework can be, it is not tailored to a specific identity provider. The Azure Spring Boot Starter for Azure Active Directory is the result of collaborative efforts from Microsoft and VMware to provide the most optimal way to connect your application to an Azure AD tenant and protect resource APIs with Azure Active Directory. Case in point, there are scenarios where you may want to authorize against multiple resource servers, and you can simply do that by including multiple authorization clients in your application configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To get started with the Azure Spring boot starter for Azure Active Directory, connect your application to an Azure AD tenant, and include the following configuration in your &lt;code&gt;application.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="yml"&gt;azure:
  activedirectory:
    tenant-id: xxxxxx-your-tenant-id-xxxxxx
    client-id: xxxxxx-your-client-id-xxxxxx
    client-secret: xxxxxx-your-client-secret-xxxxxx
    authorization-clients:
      graph:
        scopes:
            - https://graph.microsoft.com/User.Read
            - https://graph.microsoft.com/Directory.AccessAsUser.All&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Get the &lt;code&gt;OAuth2AuthorizedClient&lt;/code&gt; in your Controller:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@GetMapping("/graph")
@ResponseBody
public String graph(
    @RegisteredOAuth2AuthorizedClient("graph") OAuth2AuthorizedClient client
) {
// Now you can use the access token to access a graph URI
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more detail see our  &lt;a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp"&gt;sample project&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Let&amp;#8217;s look at some of the recent enhancements in the starter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="web-applications"&gt;&lt;a class="anchor" href="#web-applications"&gt;&lt;/a&gt;Web applications&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="integration-with-microsoft-api"&gt;&lt;a class="anchor" href="#integration-with-microsoft-api"&gt;&lt;/a&gt;Integration with Microsoft API&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The identity platform provides Microsoft APIs to interact with many well-known Microsoft SaaS applications. For example, use the graph API to interact with Office 365, Azure DevOps to talk to with Azure DevOps server and Azure Batch to schedule HPC applications in the cloud. To use the graph API
First configure your &lt;code&gt;application.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="yml"&gt;azure:
  activedirectory:
    authorization-clients:
      graph:
        scopes:
            - https://graph.microsoft.com/User.Read
            - https://graph.microsoft.com/Directory.AccessAsUser.All&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And then get the &lt;code&gt;OAuth2AuthorizedClient&lt;/code&gt; in your Controller.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="incremental-consent"&gt;&lt;a class="anchor" href="#incremental-consent"&gt;&lt;/a&gt;Incremental consent&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can incrementally approve your application access to resources and APIs as needed. This type of behavior is desirable when you want to have finer control of access management, as opposed to granting all scopes upfront. To utilize incremental consent in a web application, configure your &lt;code&gt;application.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="yml"&gt;azure:
  activedirectory:
    authorization-clients:
      arm:
        on-demand: true
        scopes: https://management.core.windows.net/user_impersonation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Incremental consent is triggered when an application tries to get corresponding &lt;code&gt;OAuth2AuthorizedClient&lt;/code&gt;. It can also be triggered by accessing the URL: &lt;code&gt;/login/oauth2/code/{authorization-client}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="integrate-with-aad-for-logout"&gt;&lt;a class="anchor" href="#integrate-with-aad-for-logout"&gt;&lt;/a&gt;Integrate with AAD for logout&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Add &lt;code&gt;azure.activedirectory.post-logout-redirect-uri&lt;/code&gt; in your configuration properties and your application will automatically log out all active sessions when the user performs a log out, and then redirect the user to the &lt;code&gt;logout-redirect-uri&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp"&gt;this web application sample project&lt;/a&gt; for more detail. (This sample includes all 3 scenarios)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="resource-server"&gt;&lt;a class="anchor" href="#resource-server"&gt;&lt;/a&gt;Resource server&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="aad-protected-resource-server"&gt;&lt;a class="anchor" href="#aad-protected-resource-server"&gt;&lt;/a&gt;AAD protected resource server&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In OAuth 2.0, a resource server is an application that protects underlying resources with a token. In this release we°Øve added validation for Audience and Issuer to ensure intended audience and issuer are respected.
See the &lt;a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server"&gt;resource server sample project&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="on-behalf-of-flow-with-spring-resource-server"&gt;&lt;a class="anchor" href="#on-behalf-of-flow-with-spring-resource-server"&gt;&lt;/a&gt;On Behalf-of-flow with spring resource server&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;When your application calls API A with a token, and API A in turn calls API B, a different token is required before API B can be accessed. OAuth 2.0 provides an On-Behalf-Of (OBO) flow that is designed to handle this common scenario. With the Azure Spring Boot Starter for Azure Active Directory, you can delegate a user identity request and propagate through the request chain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo"&gt;the resource server with OBO sample project&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="other-notable-changes"&gt;&lt;a class="anchor" href="#other-notable-changes"&gt;&lt;/a&gt;Other notable changes&lt;/h3&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="pack-id-change"&gt;&lt;a class="anchor" href="#pack-id-change"&gt;&lt;/a&gt;Pack ID change:&lt;/h4&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To align with the rest of Azure SDKs, starting from 3.x, the package ID for Azure Spring Boot starters has been renamed from &lt;code&gt;azure-[startername]-spring-boot&lt;/code&gt; to &lt;code&gt;azure-spring-boot-[startername]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="latest-versions"&gt;&lt;a class="anchor" href="#latest-versions"&gt;&lt;/a&gt;Latest versions:&lt;/h4&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Version 3.0.0 is released and includes support for Spring boot 2.2.x and 2.3.x&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data 2020.0.3 and 2021.0-M2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/13/spring-data-2020-0-3-and-2021-0-m2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2021-01-13:4333</id>
    <updated>2021-01-13T15:38:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I°Øm pleased to announce a Spring Data double release 2020.0.3 and 2021.0-M2.&lt;br/&gt;The releases include fixes for projection interfaces, vavr integration, time value precision and 3rd party library upgrades. Make sure to check out out individual change logs.&lt;/p&gt;
&lt;p&gt;The service release will be picked up by upcoming Spring Boot 2.4.2.&lt;/p&gt;&lt;h2&gt;&lt;a href="#2020-0-3" class="anchor" name="2020-0-3"&gt;&lt;/a&gt;2020.0.3&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.1.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.1.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.1.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.0.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.0.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.2.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.2.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.4.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.4.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.1.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.1.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.1.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.3.3 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.3.3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#2021-0-m2" class="anchor" name="2021-0-m2"&gt;&lt;/a&gt;2021.0-M2&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.2 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/2.2.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.2 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/3.2.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.2 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/3.2.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.1 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/6.1.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.3 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-r2dbc/1.3.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.5 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.5.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.2 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/4.2.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.2 M2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/4.2.0-M2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>YMNNALFT: Express Yourself with SpEL</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/13/ymnnalft-express-yourself-with-spel" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-30:4319</id>
    <updated>2021-01-13T11:00:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;You May Not Need Another Library For That&lt;/em&gt; (YMNNALFT)! I&amp;rsquo;ve spent a lot of time since 2016 illuminating (or trying to, anyway!) some of the more enormous opportunities in the Spring ecosystem in &lt;a href="http://bit.ly/spring-tips-playlist"&gt;my Spring Tips videos&lt;/a&gt;. Today, however, I come to you in a different spirit, wanting to focus on the little, sometimes hidden, gems that do fantastic things and that might spare you an additional third-party dependency and its implied complexity. &lt;/p&gt;
&lt;p&gt;Do your users want a convenient, bite-sized way to customize the behavior of your application? Expression Languages are purpose-built to allow low-touch customization of application behavior. Expression languages have a ton of applications. They can help you evaluate things! Perhaps they could run simple predicate logic that a user has configured. An expression language can dereference environment values, glue things together, support templating, customize access control and authorization predicates, support customized messaging flow routing and workflow event handler logic, and so much more. A good expression language is so useful that we built the Spring Expression Language (SpEL) and shipped it with Spring Framework 3.0 &lt;em&gt;waaaaay&lt;/em&gt; back in 2009! &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll never forget &lt;em&gt;that&lt;/em&gt; addition! I was trawling the source code in Subversion, and I observed that &lt;a href="http://twitter.com/andy_clement"&gt;Andy Clement&lt;/a&gt; (one of our resident mad scientists and genuinely one of the neatest human beings I know) had added a &lt;em&gt;brand new&lt;/em&gt; expression language to Spring. &lt;/p&gt;
&lt;p&gt;Of &lt;em&gt;course&lt;/em&gt; he did. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth noting here that the expression was a &lt;em&gt;superset&lt;/em&gt; of existing expression languages like &lt;a href="https://commons.apache.org/proper/commons-ognl/language-guide.html"&gt;OGNL&lt;/a&gt; and &lt;a href="https://docs.jboss.org/seam/2.3.1.Final/reference/html/elenhancements.html"&gt;JBoss EL&lt;/a&gt; (both of which provided more features than other expression languages of the day like those you&amp;rsquo;d find in Java Server Pages or Java Server Faces, for example). Andy had developed this new expression language over a few weeks. So, when I tell you that Andy Clement had (in a matter of weeks!) checked in a brand Expression Language that exceeded brand X, what that &lt;em&gt;should&lt;/em&gt; say to you is that Andy Clement can do anything and that we should all be delighted that&amp;rsquo;ll be on our side when the machines attack! &lt;/p&gt;
&lt;p&gt;This new expression language used &lt;a href="https://www.antlr.org/"&gt;ANTLR&lt;/a&gt;, which is an awesome, powerful parser generator that, given a grammar definition, will generate Java code that knows how to parse whatever is defined in that grammar. So, you could use the ANTLR grammar to teach ANTLR about how to parse, let&amp;rsquo;s say, a hashtag (&lt;code&gt;#&lt;/code&gt; + &lt;code&gt;A_LABEL&lt;/code&gt;) or an ISO 8601 date or Java source code, or a SQL query, and ANTLR will generate Java code to parse text that complies with that grammar. It invokes callbacks when it encounters elements of that grammar. It is basically the JVM ecosystem equivalent of the classic Yacc / Lex toolchain, and you&amp;rsquo;re no doubt using software that in turn uses ANTLR to provide a parser. ANTLR is &lt;em&gt;awesome&lt;/em&gt;. You could write a Java compiler. A SQL parser. An email validator. An HTML parser. The sky&amp;rsquo;s the limit! It&amp;rsquo;s used by the best and brightest and so you can be assured that it &lt;em&gt;will&lt;/em&gt; work! It&amp;rsquo;s used in Groovy, Jython, Hibernate, MySQL Workbench, Apache Cassandra, Processing, Presto, Salesforce&amp;rsquo;s Apex, and countless other projects besides. &lt;/p&gt;
&lt;p&gt;I was &lt;em&gt;impressed&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;This expression language was looking great, and ANTLR is excellent, and it was solid engineering all around. &lt;/p&gt;
&lt;p&gt;So, naturally, Andy removed ANTLR and replaced it with his own hand-written his own hand-rolled recursive descent parser! Amazing! (Who &lt;em&gt;DOES&lt;/em&gt; that?) &lt;/p&gt;
&lt;p&gt;I was &lt;em&gt;SO&lt;/em&gt; impressed! &lt;/p&gt;
&lt;img src ="https://i.imgflip.com/18xaq7.jpg"  /&gt;
&lt;p&gt;SpEL is boss-sauce software, friends. It&amp;rsquo;s used all over the Spring ecosystem, in Spring Framework for evaluation purposes; in Spring Security for certain kinds of access control rules; in Spring Integration to evaluate expressions against messages; in Spring Data to tie specific queries to other contexts (like Spring Security). The list goes on. &lt;/p&gt;
&lt;p&gt;In the intervening decade, SpEL has grown even more magical. It even has a compiler! That&amp;rsquo;s bananas because that compilation step can be entirely transparent to the user. And you can use it for whatever you&amp;rsquo;d like, both in Spring configuration and by itself, as a standalone library. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need the following dependencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This is included by default in every Spring Boot project on &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; - &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package bootiful.el;&#xD;
&#xD;
import lombok.Data;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.expression.EvaluationContext;&#xD;
import org.springframework.expression.Expression;&#xD;
import org.springframework.expression.ExpressionParser;&#xD;
import org.springframework.expression.spel.SpelCompilerMode;&#xD;
import org.springframework.expression.spel.SpelParserConfiguration;&#xD;
import org.springframework.expression.spel.standard.SpelExpressionParser;&#xD;
import org.springframework.expression.spel.support.StandardEvaluationContext;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class BootifulApplication {&#xD;
&#xD;
	@Bean&#xD;
	Bar bar(@Value(&amp;quot;#{ foo.name }&amp;quot;) String name) {&#xD;
		return new Bar(name);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	Foo foo() {&#xD;
		return new Foo();&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready() {&#xD;
		return event -&amp;gt; {&#xD;
&#xD;
			SpelParserConfiguration configuration = new SpelParserConfiguration(//&#xD;
					SpelCompilerMode.IMMEDIATE, ClassLoader.getSystemClassLoader());&#xD;
			ExpressionParser expressionParser = new SpelExpressionParser(configuration);&#xD;
&#xD;
			double randomProperty = evaluate(expressionParser, &amp;quot;randomProperty&amp;quot;, new MyContext());&#xD;
			System.out.println(&amp;quot;randomProperty: &amp;quot; + randomProperty);&#xD;
&#xD;
			String uppercase = evaluate(expressionParser, &amp;quot;&amp;#39;andy clement for president&amp;#39;.toUpperCase()&amp;quot;, null);&#xD;
			System.out.println(&amp;quot;uppercase: &amp;quot; + uppercase);&#xD;
		};&#xD;
	}&#xD;
&#xD;
	@SuppressWarnings(&amp;quot;unchecked&amp;quot;)&#xD;
	private static &amp;lt;T&amp;gt; T evaluate(ExpressionParser expressionParser, String expression, Object context) {&#xD;
		Expression expression2 = expressionParser.parseExpression(expression);&#xD;
		if (context != null) {&#xD;
			EvaluationContext evaluationContext = new StandardEvaluationContext(context);&#xD;
			return (T) expression2.getValue(evaluationContext);&#xD;
		} //&#xD;
		else {&#xD;
			return (T) expression2.getValue();&#xD;
		}&#xD;
	}&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;el&amp;quot;);&#xD;
		SpringApplication.run(BootifulApplication.class, args);&#xD;
	}&#xD;
&#xD;
}&#xD;
&#xD;
@Data&#xD;
class Foo {&#xD;
&#xD;
	private String name = getClass().getName();&#xD;
&#xD;
}&#xD;
&#xD;
@Data&#xD;
class Bar {&#xD;
&#xD;
	Bar(@Value(&amp;quot;#{ foo.name }&amp;quot;) String name) {&#xD;
		System.out.println(&amp;quot;name: &amp;quot; + name);&#xD;
	}&#xD;
&#xD;
}&#xD;
&#xD;
@Data&#xD;
class MyContext {&#xD;
&#xD;
	private final double randomProperty = Math.random();&#xD;
&#xD;
	public int factorial(int n) {&#xD;
		if (n == 0)&#xD;
			return 1;&#xD;
		else&#xD;
			return (n * factorial(n - 1));&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what I put into my &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.main.web-application-type=none
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two things to look for in this application: using SpEL in a standalone context and using SpEL as part of your Spring application. &lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt;&lt;/code&gt; I manually instantiate an instance of &lt;code&gt;SpelExpressionParser&lt;/code&gt;, against which I can evaluate SpEL expressions. I show how to configure a custom context (an object against which the expression may invoke methods and dereference properties) and use the expression language to call a method on a &lt;code&gt;String&lt;/code&gt; literal. &lt;/p&gt;
&lt;p&gt;I also configure two beans, &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt;. &lt;code&gt;Bar&lt;/code&gt; depends on a property in &lt;code&gt;Foo&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, which dereferences that property using SpEL and then references other beans in the Spring application context.&lt;/p&gt;
&lt;p&gt;Did you like this gem at a glance approach? Did you learn anything? As always, I&amp;rsquo;m keen on hearing from you, so &lt;a href="http://twitter.com/starbuxman"&gt;please sound off on Twitter (@starbuxman) &lt;/a&gt;! I&amp;rsquo;ll be back with another installment of &lt;em&gt;YMNNALFT&lt;/em&gt;, so be sure not to miss that. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 12th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/01/12/this-week-in-spring-january-12th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-01-13:4331</id>
    <updated>2021-01-13T05:13:00Z</updated>
    <content type="html">&lt;p&gt;I almost wrote in 2020! There&amp;rsquo;s been so much going on I almost forgot to take stock of the &lt;em&gt;year&lt;/em&gt;. What a rush. We better get to the roundup before I somehow lose even more track of time. So, without further ado, this week&amp;rsquo;s roundup.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/11/spring-framework-5-3-3-available-now"&gt;Spring Framework 5.3.3 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I posted another installment of &lt;em&gt;You May Not Need a Library For That&lt;/em&gt;, this one looking at &lt;a href="https://spring.io/blog/2021/01/11/ymnnalft-http-clients"&gt;the fabulous &lt;code&gt;WebClient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/01/07/spring-data-s-migration-from-jira-to-github-issues"&gt;Spring Data&amp;rsquo;s Migration from Jira to GitHub Issues &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s installment of a &lt;a href="https://spring.io/blog/2021/01/07/a-bootiful-podcast-netty-and-armeria-founder-trustin-lee"&gt;Bootiful Podcast, I talked to Netty founder Trustin Lee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s installment of &lt;em&gt;You May Not Need a Library For That&lt;/em&gt;, I looked at &lt;a href="https://spring.io/blog/2021/01/06/ymnnalft-reactive-dataflow-with-project-reactor"&gt;reactive dataflow with project Reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/shelajev/status/1347165207068610561?s=12"&gt;A useful sheet full of information about GraalVM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/odrotbohm/spring-playground"&gt;Oliver Drotbohm&amp;rsquo;s collection of tiny helpers for building Spring applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is very cool: Ruchi Saini wrote a pretty long introduction on how to build &lt;a href="https://dzone.com/articles/how-to-create-microservices-using-spring"&gt;microservices with Spring (Cloud)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ram N. has published an interesting article looking at &lt;a href="https://dzone.com/articles/spring-boot-crud-operations-example-with-exception"&gt;Spring Boot CRUD operations with exception handling&lt;/a&gt;: nice!&lt;/li&gt;
  &lt;li&gt;Ram N. also posted a video looking &lt;a href="https://dzone.com/articles/what-is-byname-auto-wiring-mode-in-spring"&gt;at Spring&amp;rsquo;s &lt;code&gt;byName&lt;/code&gt; auto-wiring mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
